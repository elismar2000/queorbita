import numpy as np
import matplotlib.pyplot as plt

from tables import *

import sys

plt.style.use('seaborn')

mins = sys.argv[1] #the file in which the potential minima are stored (table generated by potential_gadget.py)
vels = sys.argv[2] #the file in which the radial velocities are stored (table generated by radial_velocity.py)

#===============================
#Reading mins table
#===============================

mins_h5file = open_file(mins, 'a')
mins_table = mins_h5file.root.potential.readout

xmin1 = np.array([j['xmin1'] for j in mins_table.iterrows()])
ymin1 = np.array([j['ymin1'] for j in mins_table.iterrows()])
zmin1 = np.array([j['zmin1'] for j in mins_table.iterrows()])
coords_min1 = np.vstack((xmin1, ymin1, zmin1))

xmin2 = np.array([j['xmin2'] for j in mins_table.iterrows()])
ymin2 = np.array([j['ymin2'] for j in mins_table.iterrows()])
zmin2 = np.array([j['zmin2'] for j in mins_table.iterrows()])
coords_min2 = np.vstack((xmin2, ymin2, zmin2))

distances = np.sqrt((coords_min1[0] - coords_min2[0])**2 + (coords_min1[1] - coords_min2[1])**2)

distances_3d = np.sqrt((coords_min1[0] - coords_min2[0])**2 + (coords_min1[1] - coords_min2[1])**2 +
    (coords_min1[2] - coords_min2[2])**2)

#===============================
#Reading radial velocity table
#===============================

vels_h5file = open_file(vels, 'a')
vels_table = vels_h5file.root.velocity.readout

snapshots = np.array([j['snapshot'] for j in vels_table.iterrows()])
radial_velocity = np.array([j['radial_vel'] for j in vels_table.iterrows()])
# import pdb; pdb.set_trace()
#===============================
#Plotting
#===============================

fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 5))

for i in range(0, 4):
    axs[int(i/2), i%2].tick_params(axis='both', which='both', tickdir='in', labelsize=10,
        top=True, right=True, width=1.5)

axs[0, 0].plot(coords_min1[0], coords_min1[1], 'rX', label='Galaxy 1')
axs[0, 0].plot(coords_min2[0], coords_min2[1], 'yX', label='Galaxy 2')
axs[0, 0].plot(coords_min1[0][0], coords_min1[1][0], 'b*')
axs[0, 0].plot(coords_min2[0][0], coords_min2[1][0], 'b*')
axs[0, 0].set_ylabel('y (kpc)')
axs[0, 0].set_xlabel('x (kpc)')
axs[0, 0].set_title('Trajectory')
axs[0, 0].legend()

axs[0, 1].plot(snapshots, distances, 'o--', color='steelblue')
axs[0, 1].axhline(y=42.18, xmin=0, xmax=40, color='red')
axs[0, 1].set_xlabel('Snapshot')
axs[0, 1].set_ylabel('Projected distance (kpc)')
axs[0, 1].set_title('Projected distance')

axs[1, 0].plot(snapshots, radial_velocity, 'o--', color='brown')
axs[1, 0].set_xlabel('Snapshot')
axs[1, 0].fill_between(snapshots, y1=-119-34, y2=-119+34, facecolor='khaki')
axs[1, 0].set_ylabel('Radial velocity (km/s)')
axs[1, 0].set_title('Radial Velocity')

axs[1, 1].plot(snapshots, distances_3d, 'o--', color='blueviolet')
axs[1, 1].set_xlabel('Snapshot')
axs[1, 1].set_ylabel('Distance (kpc)')
axs[1, 1].set_title('Distance')
#
# axs[0, 0].grid()
# axs[0, 1].grid()
# axs[1, 0].grid()
# axs[1, 1].grid()

plt.subplots_adjust(wspace=0.3, hspace=0.5)

plt.jet()
plt.savefig('simulation_analysis.pdf', dpi=5)
#plt.show()
